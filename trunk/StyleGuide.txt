
   PyMS coding Style Guide
   =========================

   [This basis for this document documents was PEP-8 "Style Guide for
   Python Code", by Guido van Rossum and Barry Warsaw]

  1. Identation

    1.1 Use 4 spaces per indentation level. Do not use tabs.

  2. Line length

    2.1 Limit all lines to a maximum of 80 characters.  Long lines should
        be wrapped with implied line continuation if inside parentheses,
        or explicitly using a backslash. Indent the continued line for 8
        spaces to distinguish from the normal 4 spaces for one indentation
        level.

  3. Imports

    3.1 Group imports as:

        1) Standard library imports
        2) External module imports
        3) Other PyMS subpackage imports
        4) This subpackage imports

        Separate each group by a blank line.

    3.2 Imports

        3.2.1 For standard library modules, always import the entire module
              name space. i.e.

              import os
              ...
              os.path()

        3.2.2 For PyMS modules always import specific functions, i.e.

              from pyms.Utils.Utils import is_str, is_int 

  4. Whitespaces

    4.1 Use tight parentheses, brackets or braces, as in: spam(ham[1],{eggs:2})

    4.2 Do not use whitespace after an expression, or immediately before a comma,
        semicolon, or colon

        if x == 4 : print x , y ; x , y = y , x
        Write this as
        if x == 4: print x, y; x, y = y, x

    4.3 Use only one space around binary operators (assignment (=), comparisons
        (==, <, >, !=, <>, <=, >=, in, not in, is, is not), Booleans (and, or, not)

    4.4 In complex expressions do not insert spaces around arithmetic operators
        on the first level, but do insert a single space on the second level to
        improve readability. For example:
        i = i+1
        x = x*2 - 1

  5. Comments

    5.1 Comments should be complete sentences.  If a comment is a phrase
        or sentence, its first word should be capitalized, unless it is
        an identifier that begins with a lower case letter.

    5.2 If a comment is short, the period at the end is best omitted.
        Longer comments of block comments generally consist of one or
        more paragraphs built out of complete sentences, and each sentence
        should end with a period.

    5.3 Block comments generally apply to some (or all) code that follows
        them, and are indented to the same level as that code.  Each line
        of a block comment starts with a # and a single space (unless it
        is indented text inside the comment).  Paragraphs inside a block
        comment are separated by a line containing a single #.  Block
        comments should be surrounded by a blank line above and below them.

    5.4 An inline comment is a comment on the same line as a statement.
        Inline comments should be separated by a two spaces from the
        statement, and should start with a # and a single space. Use
        sparingly.

  6. Naming Styles
 
    6.1 Variable names

        6.1.1 Global variable names should be prefixed with an underscore
              to prevent their export from the module.

        6.1.2 Specific variable names:

              - Use 'file_name' instead of 'filename'

              - Use 'fp' for file pointer, i.e.
                   fp = open(file_name, 'r')

    6.2 Module names.  Module names should be short, starting with an
        uppercase letter (i.e. Utils.py).

    6.2 Class names.  Class names use the CapWords convention. Classes for
        internal use have a leading underscore in addition.

    6.4 Exception Names. Exceptions should be handled via the function
        pyms.Utils.Error.error() 

    6.5 Function names should be lowercase, with words separated by
        underscores where suitable to improve readability. 

    6.6 Method Names names should follow the same principles as the function
        names.

    6.7 Internal methods and instance variables. Use one leading underscore
        only for internal methods and instance variables which are not
        intended to be part of the class's public interface.

    6.8 Class-private names. Use two leading underscores to denote
        class-private names, this includes class-private methods (eg.
        __privfunc()). Note: Python "mangles" these names with the
        class name: if class Foo has an attribute named __a, it cannot
        be accessed by Foo.__a. (it still could be accessed by calling
        Foo._Foo__a.)

    6.9 Private/public class attributes. Public attributes should have
        no leading or trailing underscores. Private attributes should
        have two leading underscores, no trailing underscores. Non-public
        attributes should have a single leading underscore, no trailing
        underscores (the difference between private and non-public is that
        the former will never be useful for a derived class, while the
        latter might be).

    6.10 Appendix: Python specific meanings

        - _single_leading_underscore: weak "internal use" indicator (e.g.
          "from M import *" does not import objects whose name starts with
          an underscore).

        - single_trailing_underscore_: used by convention to avoid conflicts
          with Python keyword, e.g.
          "Tkinter.Toplevel(master, class_='ClassName')".

        - __double_leading_underscore: class-private names as of Python 1.4.

        - __double_leading_and_trailing_underscore__: "magic" objects or
          attributes that live in user-controlled namespaces, e.g. __init__,
          __import__ or __file__.

